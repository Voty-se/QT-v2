@using QT.Authentication
@model IEnumerable<QT.User>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_XxxLutzLayout.cshtml";
    var isAdmin = AdminAuthenticationHelper.Current.GetAdminUserData().Role == Role.Administrator.ToString();
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Lastname)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Username)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Password)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Role)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Lastname)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Username)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Password)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Role)
        </td>
        <td>
            @Html.ActionLink("Details", "Details", new { id = item.Id }) |
            @{
                if (item.Role != Role.qt.ToString() && isAdmin)
                {
                    @Html.ActionLink("Edit", "Edit", new {id = item.Id})
                    <span> | </span>
                    @Html.ActionLink("Delete", "Delete", new {id = item.Id})
                }
            }
        </td>
    </tr>
}

</table>
